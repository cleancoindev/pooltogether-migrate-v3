{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC777",
          "name": "_poolDaiToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC777",
          "name": "_poolUsdcToken",
          "type": "address"
        },
        {
          "internalType": "contract MixedPodInterface",
          "name": "_poolDaiPod",
          "type": "address"
        },
        {
          "internalType": "contract MixedPodInterface",
          "name": "_poolUsdcPod",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_v3Token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReceivedTokens",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interfaceHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canImplementInterfaceForAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolDaiPod",
      "outputs": [
        {
          "internalType": "contract MixedPodInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolDaiToken",
      "outputs": [
        {
          "internalType": "contract IERC777",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolUsdcPod",
      "outputs": [
        {
          "internalType": "contract MixedPodInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolUsdcToken",
      "outputs": [
        {
          "internalType": "contract IERC777",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v3Token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC777",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawERC777",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0xE0F4217390221aF47855E094F6e112D43C8698fE",
    "contractAddress": "0x071911fA06AB97447D644eE4d5BCFdD63C1081a0",
    "transactionIndex": 43,
    "gasUsed": "933077",
    "logsBloom": "0x
    "blockHash": "0xa57d8e29a1d63bf2138c84b890e0b79e2e071d1b6ee0da00a0a894d40b382fb0",
    "transactionHash": "0x3e12959b672547da7e233038037ba9f8523c42dadefc81f3e5db7a1635326ff2",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 11128092,
        "transactionHash": "0x3e12959b672547da7e233038037ba9f8523c42dadefc81f3e5db7a1635326ff2",
        "address": "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24",
        "topics": [
          "0x93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153",
          "0x000000000000000000000000071911fa06ab97447d644ee4d5bcfdd63c1081a0",
          "0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b",
          "0x000000000000000000000000071911fa06ab97447d644ee4d5bcfdd63c1081a0"
        ],
        "data": "0x",
        "logIndex": 98,
        "blockHash": "0xa57d8e29a1d63bf2138c84b890e0b79e2e071d1b6ee0da00a0a894d40b382fb0"
      },
      {
        "transactionIndex": 43,
        "blockNumber": 11128092,
        "transactionHash": "0x3e12959b672547da7e233038037ba9f8523c42dadefc81f3e5db7a1635326ff2",
        "address": "0x071911fA06AB97447D644eE4d5BCFdD63C1081a0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e0f4217390221af47855e094f6e112d43c8698fe"
        ],
        "data": "0x",
        "logIndex": 99,
        "blockHash": "0xa57d8e29a1d63bf2138c84b890e0b79e2e071d1b6ee0da00a0a894d40b382fb0"
      }
    ],
    "blockNumber": 11128092,
    "cumulativeGasUsed": "4370545",
    "status": 1,
    "byzantium": true
  },
  "address": "0x071911fA06AB97447D644eE4d5BCFdD63C1081a0",
  "args": [
    "0x49d716DFe60b37379010A75329ae09428f17118d",
    "0xBD87447F48ad729C5c4b8bcb503e1395F62e8B98",
    "0x9F4C5D8d9BE360DF36E67F52aE55C1B137B4d0C4",
    "0x6F5587E191C8b222F634C78111F97c4851663ba4",
    "0x334cBb5858417Aee161B53Ee0D5349cCF54514CF"
  ],
  "solcInputHash": "0x5f97cadb2e14e3b1dba1138cf45a9cf9906d55542cdcab9406e0578a54f1f6ca",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC777\",\"name\":\"_poolDaiToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC777\",\"name\":\"_poolUsdcToken\",\"type\":\"address\"},{\"internalType\":\"contract MixedPodInterface\",\"name\":\"_poolDaiPod\",\"type\":\"address\"},{\"internalType\":\"contract MixedPodInterface\",\"name\":\"_poolUsdcPod\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_v3Token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedTokens\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canImplementInterfaceForAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolDaiPod\",\"outputs\":[{\"internalType\":\"contract MixedPodInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolDaiToken\",\"outputs\":[{\"internalType\":\"contract IERC777\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolUsdcPod\",\"outputs\":[{\"internalType\":\"contract MixedPodInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolUsdcToken\",\"outputs\":[{\"internalType\":\"contract IERC777\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v3Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC777\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawERC777\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canImplementInterfaceForAddress(bytes32,address)\":{\"details\":\"Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract implements `interfaceHash` for `account`. See {IERC1820Registry-setInterfaceImplementer}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MigrateV2ToV3.sol\":\"MigrateV2ToV3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x04a69a78363214b4e3055db8e620bed222349f0c81e9d1cbe769eb849b69b73f\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Implementer.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface for an ERC1820 implementer, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\\n * Used by contracts that will be registered as implementers in the\\n * {IERC1820Registry}.\\n */\\ninterface IERC1820Implementer {\\n    /**\\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\\n     * implements `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd61eddb6efd8690bb0d1074a00e818e29009ffc6e36cd6dced4b6c6c27e24689\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Registry.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0xf96602898a507855ea4a0b3a2576e787433a9bba9ca555fadf16ffc03d15a6fe\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0x5d9e02a26cd8ae92627495d65becc3e122e6eef07ed5911db3cdbf168c3f59fa\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x55a013725aefc9de0c0f6fca871e7edef78ff30481175461f4e06cdcd20bf72a\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Sender.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * {IERC777} Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n *  their own implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Sender {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x32a1be516e63f5926d5cea799c2e1b8619b11d10ebf8909d4f3bb1cce5ab0eec\"},\"contracts/MigrateV2ToV3.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport \\\"./external/MixedPodInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Sender.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Implementer.sol\\\";\\n\\ncontract MigrateV2ToV3 is OwnableUpgradeSafe, IERC777Recipient, IERC1820Implementer {\\n\\n  IERC1820Registry constant internal ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n  bytes32 constant private _ERC1820_ACCEPT_MAGIC = keccak256(abi.encodePacked(\\\"ERC1820_ACCEPT_MAGIC\\\"));\\n\\n  // keccak256(\\\"ERC777TokensRecipient\\\")\\n  bytes32 constant internal TOKENS_RECIPIENT_INTERFACE_HASH =\\n  0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\\n\\n  event ReceivedTokens(address token, address from, uint256 amount);\\n\\n  IERC777 public poolDaiToken;\\n  IERC777 public poolUsdcToken;\\n  MixedPodInterface public poolDaiPod;\\n  MixedPodInterface public poolUsdcPod;\\n  IERC20 public v3Token;\\n\\n  constructor (\\n    IERC777 _poolDaiToken,\\n    IERC777 _poolUsdcToken,\\n    MixedPodInterface _poolDaiPod,\\n    MixedPodInterface _poolUsdcPod,\\n    IERC20 _v3Token\\n  ) public {\\n    poolDaiToken = _poolDaiToken;\\n    poolUsdcToken = _poolUsdcToken;\\n    poolDaiPod = _poolDaiPod;\\n    poolUsdcPod = _poolUsdcPod;\\n    v3Token = _v3Token;\\n\\n    // register interfaces\\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\\n\\n    __Ownable_init();\\n  }\\n\\n  function tokensReceived(\\n    address,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    bytes calldata,\\n    bytes calldata\\n  ) external override {\\n    require(to == address(this), \\\"MigrateV2ToV3/only-tokens\\\");\\n\\n    if (msg.sender == address(poolDaiToken)) {\\n      v3Token.transfer(from, amount);\\n    } else if (msg.sender == address(poolUsdcToken)) {\\n      v3Token.transfer(from, amount * 1e12);\\n    } else if (msg.sender == address(poolDaiPod)) {\\n      uint256 collateral = poolDaiPod.tokenToCollateralValue(amount);\\n      v3Token.transfer(from, collateral);\\n    } else if (msg.sender == address(poolUsdcPod)) {\\n      uint256 collateral = poolUsdcPod.tokenToCollateralValue(amount);\\n      v3Token.transfer(from, collateral * 1e12);\\n    } else {\\n      revert(\\\"MigrateV2ToV3/unknown-token\\\");\\n    }\\n\\n    emit ReceivedTokens(msg.sender, from, amount);\\n  }\\n\\n  function withdrawERC777(IERC777 token) external onlyOwner {\\n    uint256 amount = token.balanceOf(address(this));\\n    token.send(msg.sender, amount, \\\"\\\");\\n  }\\n\\n  function withdrawERC20(IERC20 token) external onlyOwner {\\n    uint256 amount = token.balanceOf(address(this));\\n    token.transfer(msg.sender, amount);\\n  }\\n\\n  function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external override view returns (bytes32) {\\n    if (account == address(this) && interfaceHash == TOKENS_RECIPIENT_INTERFACE_HASH) {\\n      return _ERC1820_ACCEPT_MAGIC;\\n    } else {\\n      return bytes32(0x00);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6037ec10c5f236a25879dd1aaa624385b91017c3f24e97252558ef614e75c763\"},\"contracts/external/MixedPodInterface.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777.sol\\\";\\nimport \\\"./PodInterface.sol\\\";\\n\\ninterface MixedPodInterface is IERC777, PodInterface {\\n}\",\"keccak256\":\"0xefc31590b7f7cab3c00abfa1821f0377c1416ddd502a71fb4ffce39cd0a2a8aa\"},\"contracts/external/PodInterface.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\ninterface PodInterface {\\n  function tokenToCollateralValue(uint256 tokens) external view returns (uint256);\\n  function balanceOfUnderlying(address user) external view returns (uint256);\\n}\",\"keccak256\":\"0x8f00a2c1e39e2a2dd749a6e05beb743158379d6899e99cb2981c3f5ab8a0e2f7\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200106538038062001065833981810160405260a08110156200003757600080fd5b50805160208201516040808401516060850151608090950151609780546001600160a01b03199081166001600160a01b0380891691909117909255609880548216838816179055609980548216838616179055609a80548216838a16179055609b805490911691831691909117905582516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b602483015260448201529251949593949193929091731820a4b7618bde71dce8cdc73aab6c95905fad24916329965a1d91606480830192600092919082900301818387803b1580156200012d57600080fd5b505af115801562000142573d6000803e3d6000fd5b50505050620001566200016160201b60201c565b5050505050620003d4565b600054610100900460ff16806200017d57506200017d6200021f565b806200018c575060005460ff16155b620001c95760405162461bcd60e51b815260040180806020018281038252602e81526020018062001037602e913960400191505060405180910390fd5b600054610100900460ff16158015620001f5576000805460ff1961ff0019909116610100171660011790555b620001ff62000225565b62000209620002cd565b80156200021c576000805461ff00191690555b50565b303b1590565b600054610100900460ff1680620002415750620002416200021f565b8062000250575060005460ff16155b6200028d5760405162461bcd60e51b815260040180806020018281038252602e81526020018062001037602e913960400191505060405180910390fd5b600054610100900460ff1615801562000209576000805460ff1961ff00199091166101001716600117905580156200021c576000805461ff001916905550565b600054610100900460ff1680620002e95750620002e96200021f565b80620002f8575060005460ff16155b620003355760405162461bcd60e51b815260040180806020018281038252602e81526020018062001037602e913960400191505060405180910390fd5b600054610100900460ff1615801562000361576000805460ff1961ff0019909116610100171660011790555b60006200036d620003d0565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156200021c576000805461ff001916905550565b3390565b610c5380620003e46000396000f3fe608060405234801561001057600080fd5b50600436106100b35760003560e01c8063715018a611610071578063715018a61461023c5780638da5cb5b14610244578063bf5486f61461024c578063da52e52e14610254578063f2fde38b1461025c578063f4f3b20014610282576100b3565b806223de29146100b857806310b25362146101a45780631b771bd6146101c8578063249cb3fa146101d05780634761f9d81461020e57806363d190fa14610216575b600080fd5b6101a2600480360360c08110156100ce57600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a08101608082013564010000000081111561011157600080fd5b82018360208201111561012357600080fd5b8035906020019184600183028401116401000000008311171561014557600080fd5b91939092909160208101903564010000000081111561016357600080fd5b82018360208201111561017557600080fd5b8035906020019184600183028401116401000000008311171561019757600080fd5b5090925090506102a8565b005b6101ac6106ad565b604080516001600160a01b039092168252519081900360200190f35b6101ac6106bc565b6101fc600480360360408110156101e657600080fd5b50803590602001356001600160a01b03166106cb565b60408051918252519081900360200190f35b6101ac610758565b6101a26004803603602081101561022c57600080fd5b50356001600160a01b0316610767565b6101a26108b5565b6101ac610957565b6101ac610966565b6101ac610975565b6101a26004803603602081101561027257600080fd5b50356001600160a01b0316610984565b6101a26004803603602081101561029857600080fd5b50356001600160a01b0316610a7d565b6001600160a01b0386163014610305576040805162461bcd60e51b815260206004820152601960248201527f4d6967726174655632546f56332f6f6e6c792d746f6b656e7300000000000000604482015290519081900360640190fd5b6097546001600160a01b03163314156103a057609b546040805163a9059cbb60e01b81526001600160a01b038a81166004830152602482018990529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561036e57600080fd5b505af1158015610382573d6000803e3d6000fd5b505050506040513d602081101561039857600080fd5b5061065b9050565b6098546001600160a01b031633141561040f57609b546040805163a9059cbb60e01b81526001600160a01b038a8116600483015264e8d4a51000890260248301529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561036e57600080fd5b6099546001600160a01b0316331415610525576099546040805163d67d7a7d60e01b81526004810188905290516000926001600160a01b03169163d67d7a7d916024808301926020929190829003018186803b15801561046e57600080fd5b505afa158015610482573d6000803e3d6000fd5b505050506040513d602081101561049857600080fd5b5051609b546040805163a9059cbb60e01b81526001600160a01b038c8116600483015260248201859052915193945091169163a9059cbb916044808201926020929091908290030181600087803b1580156104f257600080fd5b505af1158015610506573d6000803e3d6000fd5b505050506040513d602081101561051c57600080fd5b5061065b915050565b609a546001600160a01b031633141561060e57609a546040805163d67d7a7d60e01b81526004810188905290516000926001600160a01b03169163d67d7a7d916024808301926020929190829003018186803b15801561058457600080fd5b505afa158015610598573d6000803e3d6000fd5b505050506040513d60208110156105ae57600080fd5b5051609b546040805163a9059cbb60e01b81526001600160a01b038c8116600483015264e8d4a5100085026024830152915193945091169163a9059cbb916044808201926020929091908290030181600087803b1580156104f257600080fd5b6040805162461bcd60e51b815260206004820152601b60248201527f4d6967726174655632546f56332f756e6b6e6f776e2d746f6b656e0000000000604482015290519081900360640190fd5b604080513381526001600160a01b038916602082015280820187905290517fbd878faa248cebecbb044cc9fd6294f16e5afe7fc344c69ffb1931f90f636fcd9181900360600190a15050505050505050565b6097546001600160a01b031681565b609a546001600160a01b031681565b60006001600160a01b0382163014801561070457507fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b83145b1561074e57604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001209050610752565b5060005b92915050565b609b546001600160a01b031681565b61076f610bd3565b6065546001600160a01b039081169116146107bf576040805162461bcd60e51b81526020600482018190526024820152600080516020610bfe833981519152604482015290519081900360640190fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561080e57600080fd5b505afa158015610822573d6000803e3d6000fd5b505050506040513d602081101561083857600080fd5b505160408051634decdde360e11b8152336004820152602481018390526060604482015260006064820181905291519293506001600160a01b03851692639bd9bbc69260a48084019391929182900301818387803b15801561089957600080fd5b505af11580156108ad573d6000803e3d6000fd5b505050505050565b6108bd610bd3565b6065546001600160a01b0390811691161461090d576040805162461bcd60e51b81526020600482018190526024820152600080516020610bfe833981519152604482015290519081900360640190fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6065546001600160a01b031690565b6098546001600160a01b031681565b6099546001600160a01b031681565b61098c610bd3565b6065546001600160a01b039081169116146109dc576040805162461bcd60e51b81526020600482018190526024820152600080516020610bfe833981519152604482015290519081900360640190fd5b6001600160a01b038116610a215760405162461bcd60e51b8152600401808060200182810382526026815260200180610bd86026913960400191505060405180910390fd5b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b610a85610bd3565b6065546001600160a01b03908116911614610ad5576040805162461bcd60e51b81526020600482018190526024820152600080516020610bfe833981519152604482015290519081900360640190fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b2457600080fd5b505afa158015610b38573d6000803e3d6000fd5b505050506040513d6020811015610b4e57600080fd5b50516040805163a9059cbb60e01b81523360048201526024810183905290519192506001600160a01b0384169163a9059cbb916044808201926020929091908290030181600087803b158015610ba357600080fd5b505af1158015610bb7573d6000803e3d6000fd5b505050506040513d6020811015610bcd57600080fd5b50505050565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220c7cccafc59e48a20f65067a86095f0e11de34da347e27fe8c83fde59a25a221b64736f6c634300060c0033436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b35760003560e01c8063715018a611610071578063715018a61461023c5780638da5cb5b14610244578063bf5486f61461024c578063da52e52e14610254578063f2fde38b1461025c578063f4f3b20014610282576100b3565b806223de29146100b857806310b25362146101a45780631b771bd6146101c8578063249cb3fa146101d05780634761f9d81461020e57806363d190fa14610216575b600080fd5b6101a2600480360360c08110156100ce57600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a08101608082013564010000000081111561011157600080fd5b82018360208201111561012357600080fd5b8035906020019184600183028401116401000000008311171561014557600080fd5b91939092909160208101903564010000000081111561016357600080fd5b82018360208201111561017557600080fd5b8035906020019184600183028401116401000000008311171561019757600080fd5b5090925090506102a8565b005b6101ac6106ad565b604080516001600160a01b039092168252519081900360200190f35b6101ac6106bc565b6101fc600480360360408110156101e657600080fd5b50803590602001356001600160a01b03166106cb565b60408051918252519081900360200190f35b6101ac610758565b6101a26004803603602081101561022c57600080fd5b50356001600160a01b0316610767565b6101a26108b5565b6101ac610957565b6101ac610966565b6101ac610975565b6101a26004803603602081101561027257600080fd5b50356001600160a01b0316610984565b6101a26004803603602081101561029857600080fd5b50356001600160a01b0316610a7d565b6001600160a01b0386163014610305576040805162461bcd60e51b815260206004820152601960248201527f4d6967726174655632546f56332f6f6e6c792d746f6b656e7300000000000000604482015290519081900360640190fd5b6097546001600160a01b03163314156103a057609b546040805163a9059cbb60e01b81526001600160a01b038a81166004830152602482018990529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561036e57600080fd5b505af1158015610382573d6000803e3d6000fd5b505050506040513d602081101561039857600080fd5b5061065b9050565b6098546001600160a01b031633141561040f57609b546040805163a9059cbb60e01b81526001600160a01b038a8116600483015264e8d4a51000890260248301529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561036e57600080fd5b6099546001600160a01b0316331415610525576099546040805163d67d7a7d60e01b81526004810188905290516000926001600160a01b03169163d67d7a7d916024808301926020929190829003018186803b15801561046e57600080fd5b505afa158015610482573d6000803e3d6000fd5b505050506040513d602081101561049857600080fd5b5051609b546040805163a9059cbb60e01b81526001600160a01b038c8116600483015260248201859052915193945091169163a9059cbb916044808201926020929091908290030181600087803b1580156104f257600080fd5b505af1158015610506573d6000803e3d6000fd5b505050506040513d602081101561051c57600080fd5b5061065b915050565b609a546001600160a01b031633141561060e57609a546040805163d67d7a7d60e01b81526004810188905290516000926001600160a01b03169163d67d7a7d916024808301926020929190829003018186803b15801561058457600080fd5b505afa158015610598573d6000803e3d6000fd5b505050506040513d60208110156105ae57600080fd5b5051609b546040805163a9059cbb60e01b81526001600160a01b038c8116600483015264e8d4a5100085026024830152915193945091169163a9059cbb916044808201926020929091908290030181600087803b1580156104f257600080fd5b6040805162461bcd60e51b815260206004820152601b60248201527f4d6967726174655632546f56332f756e6b6e6f776e2d746f6b656e0000000000604482015290519081900360640190fd5b604080513381526001600160a01b038916602082015280820187905290517fbd878faa248cebecbb044cc9fd6294f16e5afe7fc344c69ffb1931f90f636fcd9181900360600190a15050505050505050565b6097546001600160a01b031681565b609a546001600160a01b031681565b60006001600160a01b0382163014801561070457507fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b83145b1561074e57604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001209050610752565b5060005b92915050565b609b546001600160a01b031681565b61076f610bd3565b6065546001600160a01b039081169116146107bf576040805162461bcd60e51b81526020600482018190526024820152600080516020610bfe833981519152604482015290519081900360640190fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561080e57600080fd5b505afa158015610822573d6000803e3d6000fd5b505050506040513d602081101561083857600080fd5b505160408051634decdde360e11b8152336004820152602481018390526060604482015260006064820181905291519293506001600160a01b03851692639bd9bbc69260a48084019391929182900301818387803b15801561089957600080fd5b505af11580156108ad573d6000803e3d6000fd5b505050505050565b6108bd610bd3565b6065546001600160a01b0390811691161461090d576040805162461bcd60e51b81526020600482018190526024820152600080516020610bfe833981519152604482015290519081900360640190fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6065546001600160a01b031690565b6098546001600160a01b031681565b6099546001600160a01b031681565b61098c610bd3565b6065546001600160a01b039081169116146109dc576040805162461bcd60e51b81526020600482018190526024820152600080516020610bfe833981519152604482015290519081900360640190fd5b6001600160a01b038116610a215760405162461bcd60e51b8152600401808060200182810382526026815260200180610bd86026913960400191505060405180910390fd5b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b610a85610bd3565b6065546001600160a01b03908116911614610ad5576040805162461bcd60e51b81526020600482018190526024820152600080516020610bfe833981519152604482015290519081900360640190fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b2457600080fd5b505afa158015610b38573d6000803e3d6000fd5b505050506040513d6020811015610b4e57600080fd5b50516040805163a9059cbb60e01b81523360048201526024810183905290519192506001600160a01b0384169163a9059cbb916044808201926020929091908290030181600087803b158015610ba357600080fd5b505af1158015610bb7573d6000803e3d6000fd5b505050506040513d6020811015610bcd57600080fd5b50505050565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220c7cccafc59e48a20f65067a86095f0e11de34da347e27fe8c83fde59a25a221b64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "canImplementInterfaceForAddress(bytes32,address)": {
        "details": "Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract implements `interfaceHash` for `account`. See {IERC1820Registry-setInterfaceImplementer}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 50,
        "contract": "contracts/MigrateV2ToV3.sol:MigrateV2ToV3",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 53,
        "contract": "contracts/MigrateV2ToV3.sol:MigrateV2ToV3",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 118,
        "contract": "contracts/MigrateV2ToV3.sol:MigrateV2ToV3",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 43,
        "contract": "contracts/MigrateV2ToV3.sol:MigrateV2ToV3",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 130,
        "contract": "contracts/MigrateV2ToV3.sol:MigrateV2ToV3",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 248,
        "contract": "contracts/MigrateV2ToV3.sol:MigrateV2ToV3",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2586,
        "contract": "contracts/MigrateV2ToV3.sol:MigrateV2ToV3",
        "label": "poolDaiToken",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IERC777)2440"
      },
      {
        "astId": 2588,
        "contract": "contracts/MigrateV2ToV3.sol:MigrateV2ToV3",
        "label": "poolUsdcToken",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IERC777)2440"
      },
      {
        "astId": 2590,
        "contract": "contracts/MigrateV2ToV3.sol:MigrateV2ToV3",
        "label": "poolDaiPod",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(MixedPodInterface)2860"
      },
      {
        "astId": 2592,
        "contract": "contracts/MigrateV2ToV3.sol:MigrateV2ToV3",
        "label": "poolUsdcPod",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(MixedPodInterface)2860"
      },
      {
        "astId": 2594,
        "contract": "contracts/MigrateV2ToV3.sol:MigrateV2ToV3",
        "label": "v3Token",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(IERC20)1161"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1161": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC777)2440": {
        "encoding": "inplace",
        "label": "contract IERC777",
        "numberOfBytes": "20"
      },
      "t_contract(MixedPodInterface)2860": {
        "encoding": "inplace",
        "label": "contract MixedPodInterface",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "631000",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "canImplementInterfaceForAddress(bytes32,address)": "576",
      "owner()": "1059",
      "poolDaiPod()": "1103",
      "poolDaiToken()": "1060",
      "poolUsdcPod()": "1082",
      "poolUsdcToken()": "1081",
      "renounceOwnership()": "infinite",
      "tokensReceived(address,address,address,uint256,bytes,bytes)": "infinite",
      "transferOwnership(address)": "infinite",
      "v3Token()": "1126",
      "withdrawERC20(address)": "infinite",
      "withdrawERC777(address)": "infinite"
    }
  }
}